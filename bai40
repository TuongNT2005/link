#include<iostream>
#include<vector>
#include<map>
#include<set>
#include<math.h>
#include<algorithm>
#include<string>
#include<queue>
#include<stack>
#include<sstream>
#include<fstream>
#include<unordered_map>

using namespace std;

void bfs(int cur, int target, map<int, vector<int>>& g, vector<int>& visited)
{
	vector<int> parent(1005, 0);
	deque<int> q;
	q.push_back(cur);
	visited[cur] = 1;
	parent[cur] = 0;
	while (q.empty() == false)
	{
		for (auto it : g[q.front()])
		{
			if (visited[it] == 0)
			{
				visited[it] = 1;
				q.push_back(it);
				parent[it] = q.front();
			}
		}
		q.pop_front();
	}
	vector<int> ans;
	while (target != 0)
	{
		ans.push_back(target);
		target = parent[target];
	}
	reverse(ans.begin(), ans.end());
	for (auto it : ans) cout << it << " ";
}

void dfs(int cur, map<int, vector<int>>& g, vector<int>& visited)
{
	visited[cur] = 1;
	
	for (auto it : g[cur])
	{
		if (visited[it] == 0)
		{
			visited[it] = 1;
			dfs(it, g, visited);
		}
	}
}


void solve()
{
	int n, m;
	cin >> n >> m;
	map<int,vector<int>> g;
	for (int i = 0; i < m; i++)
	{
		int a, b; cin >> a >> b;
		g[a].push_back(b);
		g[b].push_back(a);
	}
	vector<int> visited(1005, 0);
	int ans = 0;
	for (int i = 1; i <= n; i++)
	{
		if (visited[i] == 0)
		{
			dfs(i, g, visited);
			ans++;
		}
	}
	cout << ans;
}


int main()
{
	int t; cin >> t;
	while (t--)
	{
		solve();
		cout << endl;
	}


	return 0;
}
