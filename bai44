#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Edge {
    int u, v, weight;
    bool operator<(const Edge& other) const {
        return weight < other.weight;
    }
};

const int MAX = 1000;
int parent[MAX];

// Tìm đại diện của tập hợp chứa đỉnh u
int find(int u) {
    if (parent[u] != u)
        parent[u] = find(parent[u]);
    return parent[u];
}

// Hợp nhất hai tập hợp
void unite(int u, int v) {
    parent[find(u)] = find(v);
}

int kruskal(int V, vector<Edge>& edges) {
    sort(edges.begin(), edges.end());
    for (int i = 0; i < V; ++i) parent[i] = i;

    int mst_weight = 0;
    vector<Edge> mst;

    for (Edge e : edges) {
        if (find(e.u) != find(e.v)) {
            mst.push_back(e);
            mst_weight += e.weight;
            unite(e.u, e.v);
        }
    }

    cout << "Cạnh trong cây khung:\n";
    for (Edge e : mst) {
        cout << e.u << " - " << e.v << " : " << e.weight << '\n';
    }

    return mst_weight;
}

int main() {
    int V = 5;
    vector<Edge> edges = {
        {0, 1, 10}, {0, 2, 6}, {0, 3, 5},
        {1, 3, 15}, {2, 3, 4}
    };

    int total = kruskal(V, edges);
    cout << "Tổng trọng số cây khung nhỏ nhất: " << total << '\n';
    return 0;
}
