#include<iostream>
#include<vector>
#include<map>
#include<fstream>
#include<queue>
#include<set>
#include <chrono>
#include<iomanip>
#include<string>


using namespace std;

bool linearSearch(vector<int> v, int target)
{
	for (int i = 0; i < v.size(); i++)
	{
		if (v[i] == target) return true;
	}
	return false;
}

bool binSearch(vector<int> v, int target)
{
	int l = 0;
	int r = v.size() - 1;
	while (l <= r)
	{
		int m = (l + r) / 2;
		if (v[m] == target) return true;
		else if (v[m] > target) r = m - 1;
		else l = m + 1;
	}
	return false;
}

bool ternarySearch(vector<int>& v, int target) 
{
	int left = 0, right = v.size() - 1;
	while (left <= right) 
	{
		int mid1 = left + (right - left) / 3;
		int mid2 = right - (right - left) / 3;

		if (v[mid1] == target || v[mid2] == target)
			return true;

		if (target < v[mid1]) 
		{
			right = mid1 - 1;
		}
		else if (target > v[mid2]) 
		{
			left = mid2 + 1;
		}
		else 
		{
			left = mid1 + 1;
			right = mid2 - 1;
		}
	}
	return false;
}

bool interpolationSearch(vector<int>& v, int target) 
{
	int left = 0, right = v.size() - 1;
	while (left <= right && target >= v[left] && target <= v[right]) 
	{
		if (left == right) 
		{
			if (v[left] == target) return true;
			return false;
		}

		int pos = left + ((double)(right - left) / (v[right] - v[left]) * (target - v[left]));

		if (v[pos] == target)
			return true;

		if (v[pos] < target)
			left = pos + 1;
		else
			right = pos - 1;
	}
	return false;
}

bool fibonacciSearch(vector<int>& v, int target) 
{
	int n = v.size();
	int fib2 = 0;
	int fib1 = 1;
	int fib = fib2 + fib1;

	while (fib < n) 
	{
		fib2 = fib1;
		fib1 = fib;
		fib = fib2 + fib1;
	}

	int offset = -1;
	while (fib > 1) {
		int i = min(offset + fib2, n - 1);

		if (v[i] < target) 
		{
			fib = fib1;
			fib1 = fib2;
			fib2 = fib - fib1;
			offset = i;
		}
		else if (v[i] > target) 
		{
			fib = fib2;
			fib1 = fib1 - fib2;
			fib2 = fib - fib1;
		}
		else 
		{
			return true;
		}
	}

	if (fib1 && offset + 1 < n && v[offset + 1] == target)
		return true;

	return false;
}


int main()
{
	
	for (int i = 1; i <= 5; i++)
	{
		ifstream dataIn;
		string fileName = "D:\\code\\vs code\\trr2\\trr2\\DT.INP" + to_string(i) + ".txt";
		dataIn.open(fileName);
		int n; dataIn >> n;
		int target; dataIn >> target;
		cout << fileName << endl;
		vector<int> v(n);
		for (int i = 0; i < n; i++) dataIn >> v[i];
		sort(v.begin(), v.end());
		auto start = std::chrono::high_resolution_clock::now();
		
		//cout << linearSearch(v, target);
		//cout << binSearch(v, target);
		//cout << ternarySearch(v, target);
		//cout << interpolationSearch(v, target);
		cout << fibonacciSearch(v, target);

		auto end = std::chrono::high_resolution_clock::now();
		std::chrono::duration<double> duration = end - start;
		std::cout << std::fixed << std::setprecision(9) << "time " << duration.count() << " second." << std::endl;
	}
	
	
	
	
	
		
	return 0;

}
