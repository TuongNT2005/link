#include<iostream>
#include<vector>
#include<map>
#include<fstream>
#include<queue>
#include<set>
#include <chrono>
#include<iomanip>
#include<string>


using namespace std;


void bubbleSort(vector<int> v, int n)
{
	
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n - i - 1; j++)
		{
			if (v[j] > v[j + 1]) swap(v[j], v[j + 1]);
		}
	}
	
}

void insertionSort(std::vector<int> v, int n) {

	for (int i = 0; i < n; i++)
	{
		int pos = 0;
		for (int j = 0; j <= i; j++)
		{
			if (v[i] <= v[j])
			{
				swap(v[i], v[j]);
			}
		}
	}

	
}


void seclectionSort(vector<int> v, int n)
{
	for (int i = 0; i < n - 1; i++)
	{
		int pos = i;
		for (int j = i + 1; j < n; j++)
		{
			if (v[pos] > v[j])
			{
				pos = j;
			}
		}
		swap(v[i], v[pos]);

	}
}


int partition(vector<int>& arr, int low, int high) {

	int pivot = arr[high];

	int i = low - 1;

	for (int j = low; j <= high - 1; j++) {
		if (arr[j] < pivot) {
			i++;
			swap(arr[i], arr[j]);
		}
	}

	swap(arr[i + 1], arr[high]);
	return i + 1;
}

void quickSort(vector<int>& arr, int low, int high) {

	if (low < high) {

		int pi = partition(arr, low, high);

		quickSort(arr, low, pi - 1);
		quickSort(arr, pi + 1, high);
	}
}


vector<int> merge(vector<int> a, vector<int> b)
{
	vector<int> ans;
	int ptr1 = 0;
	int ptr2 = 0;
	int n = a.size();
	int m = b.size();
	while (ptr1 != n && ptr2 != m)
	{
		if (a[ptr1] < b[ptr2])
		{
			ans.push_back(a[ptr1]);
			ptr1++;
		}
		else
		{
			ans.push_back(b[ptr2]);
			ptr2++;
		}
	}
	if (ptr1 != n)
	{
		while (ptr1 != n)
		{
			ans.push_back(a[ptr1]);
			ptr1++;
		}
	}
	if (ptr2 != m)
	{
		while (ptr2 != m)
		{
			ans.push_back(b[ptr2]);
			ptr2++;
		}
	}
	return ans;
}

vector<int> mergeSort(vector<int> a)
{
	int len = a.size();
	if (len == 1)
	{
		return a;
	}
	vector<int> l(a.begin(), a.begin() + len / 2);
	vector<int> r(a.begin() + len / 2, a.end());
	return merge(mergeSort(l), mergeSort(r));
}




int main()
{
	
	for (int i = 1; i <= 3; i++)
	{
		ifstream dataIn;
		string fileName = "D:\\code\\vs code\\trr2\\trr2\\DT.INP" + to_string(i) + ".txt";
		dataIn.open(fileName);
		int n; dataIn >> n;
		cout << fileName << endl;
		vector<int> v(n);
		for (int i = 0; i < n; i++) dataIn >> v[i];
		auto start = std::chrono::high_resolution_clock::now();
		//bubbleSort(v, n);
		//insertionSort(v, n);
		//seclectionSort(v, n);
		//vector<int> ans = mergeSort(v);
		//quickSort(v, 0, n - 1);
		auto end = std::chrono::high_resolution_clock::now();
		std::chrono::duration<double> duration = end - start;
		std::cout << std::fixed << std::setprecision(9) << "time " << duration.count() << " second." << std::endl;
	}
	
	
	
	
	
		
	return 0;

}
