#include <iostream>
#include <vector>
#include <queue>
#include <functional>
#include <limits>

using namespace std;

const int INF = numeric_limits<int>::max();
typedef pair<int, int> PII; // (trọng số, đỉnh)

int prim(int V, vector<vector<PII>>& adj) {
    vector<bool> visited(V, false);
    priority_queue<PII, vector<PII>, greater<PII>> pq;

    int mst_weight = 0;
    pq.push({0, 0}); // Bắt đầu từ đỉnh 0

    while (!pq.empty()) {
        auto [weight, u] = pq.top(); pq.pop();
        if (visited[u]) continue;
        visited[u] = true;
        mst_weight += weight;

        for (auto [v, w] : adj[u]) {
            if (!visited[v]) {
                pq.push({w, v});
            }
        }
    }

    return mst_weight;
}

int main() {
    int V = 5;
    vector<vector<PII>> adj(V);

    // Danh sách kề: (v, trọng số)
    adj[0].push_back({1, 10});
    adj[0].push_back({2, 6});
    adj[0].push_back({3, 5});
    adj[1].push_back({0, 10});
    adj[1].push_back({3, 15});
    adj[2].push_back({0, 6});
    adj[2].push_back({3, 4});
    adj[3].push_back({0, 5});
    adj[3].push_back({1, 15});
    adj[3].push_back({2, 4});

    int total = prim(V, adj);
    cout << "Tổng trọng số cây khung nhỏ nhất: " << total << '\n';

    return 0;
}
